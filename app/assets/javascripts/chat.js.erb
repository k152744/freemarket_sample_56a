$(function() {
  $('.chat_btn').on('click', function() {
    $(".chat_main").removeClass("close_chat");
    $(".chat_main").addClass("open_chat");
  });

  $('.chat_main__top img').on('click', function() {
    $(".chat_main").removeClass("open_chat");
    $(".chat_main").addClass("close_chat");
  });
  message_bot = ["よくわかりません。",
                 "言いたいことも言えないこんな世の中じゃ,POISON。反町隆史がジャニーズ事務所に所属していた頃のプロフィールによると、趣味は「キティちゃんグッズ集め」",
                 "私はオヤジです。",
                 "もう一度お願いします。",
                 "メルカリ最高。まじ卍。",
                 "May the Force be with you!",
                 "サンタクロースが着ている紅白の服は、コカ・コーラ社が自社のキャンペーンを行った際にデザインしたのが始まり。それまでは、紅白に限らず色とりどりの服を着用していた。",
                 "エッフェル塔は、温度差の関係で夏と冬とで高さが15センチも違う。",
                 "お父さんの靴下から出る臭いの元は、イソキチソウ酸という物質。",
                 "電柱の中は空洞。",
                 "JR品川駅がある住所は品川区ではなく隣の港区。(東京都港区港南2-1-78)三鷹市の大沢総合グラウンドも三鷹市ではなく隣の調布市にある。(正確には住所は三鷹市だが位置的に調布市に食い込んでいる形になっている。調布飛行場の真横。住所は東京都三鷹市大沢5-21-12)",
                 "運転中にかけていると交通事故を起こしやすい曲。第1位はワーグナー作曲の『ワルキューレの騎行』。60BPMを超えるテンポの楽曲を聴くと、心拍数と血圧が上がり興奮状態になる。クラシックの場合ゆっくりな曲調でも音数の多さや、クレッシェンドとデクレッシェドの反復によって興奮状態になるため事故を起こしやすくなる。興奮状態が絶頂期になると赤信号を無視する傾向が増えその事故率は2倍。",
                 "時々街で見かける、屋上からゴンドラやロープでぶら下がって作業をするビルの掃除。実は高い場所での作業よりも洗剤の取り扱いの方が命がけ。外壁のしつこい汚れを落とすのに人間の皮膚や骨を溶かすほどの強力な洗剤を使うため。",
                 "豆腐を薄く切り塩を塗って陰干しをして作る六畳豆腐は、かなり固い豆腐なので思いっきり角に頭をぶつけたら死ぬ可能性もある。",
                 "女性用の下着であるパンティーを日本で初めて着用したのは豊臣秀吉。",
                 "アメリカではお年玉くじ付き年賀ハガキが外国の宝くじと見なされるため、送ると違法行為になる。",
                 "ガチャピンとムックは友達ではなく師弟関係。ガチャピンが師匠、ムックが弟子。",
                 "島根県は、カップヌードルに入っている乾燥いりたまごみたいな物の生産日本一。",
                 "マクドナルドのカウンターは全店72ｃｍの高さに統一されている。これは、客がポケットからお金を出す際に一番最適な高さとされている。",
                 "アンパンマンの頭の中に入っているあんこは、つぶあん。",
                 "大阪人の歩くスピードは約毎秒1.6m。世界で１番歩くスピードが早い。",
                 "ボーリング場の貸し靴がセンスのかけらもない色をしているのは盗難防止のため。",
                 "薬局の前によくある、カエルのマスコット・ケロヨン。正面から見るとかわいらしく見えるけど、真後ろからだとすごくマッチョな体型に見える。",
                 "人の1日の平均まばたき回数は、およそ1万5千回。1回のまばたきの所要時間は、およそ0.3秒かかっている。つまり、寝る時間以外にも1時間15分ほどは目を閉じているという計算になる。",
                 "モスバーガーのモス(MOS)の意味。Mountain(山)、Ocean(海)、Sun(太陽)の頭文字からきている。",
                 "急ぐ人のためにエスカレーターの右側を空ける習慣があるのは世界でも東京だけ。大阪や世界の各都市では左側を空けるのが常識なのだ。",
                 "時代劇で人気の高い、『鬼平犯科帳』の鬼平と『遠山の金さん』の金さんは、同じ屋敷に住んでいた。",
                 "1995年、アンドリュー・ワイルズによってやっと証明されたフェルマーの定理だが、300年前にフェルマー氏は証明を済ませていた。では、なぜこんなに時間がかかったのかというと、フェルマーの論文にはこうあった。「余白が無いのでこの証明を省略する。」",
                 "ジーコ、カレカ、ドゥンガ、ブラジル人サッカー選手の名前は本名ではなくニックネームなのは有名な話。では、何故彼らがニックネームで登録するのか。それはブラジル人男子の名前はアントニオ、カルロス、ダ・シルバの三つで人口のほとんどを占めるから。本名で登録すると試合中紛らわしくなるのである。",
                 "電気クラゲに刺されて死んだ人の死因のほとんどがビックリして溺れ死に。",
                 "女性を悩ませる便秘。医学的定義によると“三日以上排便が無いこと”を 「便秘」と言うので二日目までは安心。",
                 "Windows XP に付属の IME を話し言葉優先モードで使用し、「ぎれ」という言葉を入力し、変換すると、変換候補に「ピカチュウ」と表示される",
                 "樽に剣をブスブスと刺していく「黒ヒゲ危機一髪ゲーム」。あのゲーム説明書には「樽の中にいる黒ヒゲ人形を飛び出させた人が勝ち」と書いてある。",
                 "炊飯器の説明書に指示されている分量通りお米を炊いた場合、一番美味しく炊けるお米はササニシキ。これは炊飯器の開発段階で実験に使われるお米がササニシキのため。とはいえ、味の差は海原雄山がやっと気づくかどうかほどの微妙なモノ。",
                ]
  $('.chat_input__submit').on('click', function() {
    text = $('.chat_input').val();
    if(text !== ""){
      if(text === "テトリス"){
        html = `<div class="chat_self">
                <div class="chat_self__message">
                ${text}
                </div>
                </div>`;
        body = $('.chat_main__body');
        body.append(html);
        $('.chat_input').val("");
        body.animate({scrollTop:body[0].scrollHeight}, 300, 'swing');
        var random = Math.floor( Math.random() * (message_bot.length) );
        text = message_bot[random];
        html = `<div class="chat_auto">
                  <img src="<%= image_path('IMG_9901.GIF') %>">
                  <div class="chat_auto__message">
                    <p>テトリスモードに遷移します。</p>
                  </div>
                </div>`;
        body = $('.chat_main__body');
        body.append(html);
        body.animate({scrollTop:body[0].scrollHeight}, 300, 'swing');
        setTimeout(function() {
          mode_change();
      }, 3000);
      }else{
        html = `<div class="chat_self">
                <div class="chat_self__message">
                ${text}
                </div>
                </div>`;
        body = $('.chat_main__body');
        body.append(html);
        $('.chat_input').val("");
        body.animate({scrollTop:body[0].scrollHeight}, 300, 'swing');
        var random = Math.floor( Math.random() * (message_bot.length) );
        text = message_bot[random];
        html = `<div class="chat_auto">
                  <img src="<%= image_path('IMG_9901.GIF') %>">
                  <div class="chat_auto__message">
                    <p>${text}</p>
                  </div>
                </div>`;
        body = $('.chat_main__body');
        body.append(html);
        body.animate({scrollTop:body[0].scrollHeight}, 300, 'swing');
      } 
    }
  });
  mode = false;
  function mode_change() {
    $(".chat_main").removeClass("open_chat");
    $(".chat_main").addClass("close_chat");
    $(".teto_main").removeClass("close_teto");
    $(".teto_main").addClass("open_teto");
    mode = true;
  };

  $('.teto_main__top img').on('click', function() {
    $(".teto_main").removeClass("open_teto");
    $(".teto_main").addClass("close_teto");
    mode = false;
  });
  //モードチェンジ
  var array = [
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  ];
  var move = [
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  ];
  var moveFlag = 0; // 動かす対象があるかどうか(0はない、1はあることを示す)

  function draw() {
      $('#game').find('tr').each(function(i, elemTr) { // trタグそれぞれに対する処理
          $(elemTr).children().each(function(j, elemTd) { // tdタグそれぞれに対する処理
              $(elemTd).removeClass(); // まずはクラスをすべてなしにする
              switch (array[i][j]) {
                  case 1:
                      $(elemTd).addClass("stick"); // 1の時にはstickクラスを割り振る
                      $(elemTd).addClass("back"); // 1の時にはstickクラスを割り振る
                      break;
                  case 2:
                      $(elemTd).addClass("cube"); // 1の時にはstickクラスを割り振る
                      $(elemTd).addClass("back"); // 1の時にはstickクラスを割り振る
                    break;
                  case 3:
                      $(elemTd).addClass("gnu"); // 1の時にはstickクラスを割り振る
                      $(elemTd).addClass("back"); // 1の時にはstickクラスを割り振る
                      break;
                  case 4:
                      $(elemTd).addClass("god"); // 1の時にはstickクラスを割り振る
                      $(elemTd).addClass("back"); // 1の時にはstickクラスを割り振る
                      break;
                  case 5:
                      $(elemTd).addClass("ku"); // 1の時にはstickクラスを割り振る
                      $(elemTd).addClass("back"); // 1の時にはstickクラスを割り振る
                      break;
                  case 6:
                      $(elemTd).addClass("oya"); // 1の時にはstickクラスを割り振る
                      $(elemTd).addClass("back"); // 1の時にはstickクラスを割り振る
                      break;
                  default:
                      $(elemTd).addClass("default"); // それ以外の時にはdefaultクラスを割り振る
              }
          })
      });
  }

  function fall() {
    var under = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
    tmp_array = array.slice(0, array.length);
    for (var i = 19; i >= 0; i--) {
        for (var j = 0; j < 10; j++) {
            if (under[j] == 0) {
                if (array[i][j] == 0) {
                    // 下に何もなくブロックでもない
                    under[j] = 0;
                } else {
                    // moveも一緒に動かす
                    if (move[i][j] == 1) {
                        move[i][j] = 0;
                        move[i + 1][j] = 1;
                        // 下に何もなくブロックであるとき
                        array[i + 1][j] = array[i][j];
                        array[i][j] = 0;
                    }
                    under[j] = 0;
                }
            } else {
                if (array[i][j] == 0) {
                    // 下がブロックでブロックでないとき
                    under[j] = 0;
                } else {
                 // 下がブロックでブロックのとき
                 if (move[i][j] == 1) {
                  resetMove();
                  array = tmp_array.slice(0, tmp_array.length);
                  return;
                 }
                  under[j] = 1;
              }
            }
        }
    }
  }
  function resetMove() {
    moveFlag = 0;
    for (var i = 0; i < 20; i++) {
        for (var j = 0; j < 10; j++) {
            move[i][j] = 0;
        }
    }
  }

  function moveBlockRight() {
    for (var i = 19; i >= 0; i--) {
        var newMove = move[i].concat();
        for (var j = 8; j >= 0; j--) {
            if (move[i][j] == 1) {
                array[i][j + 1] = array[i][j];
                array[i][j] = 0;
                newMove[j + 1] = 1;
                newMove[j] = 0;
            }
        }
        move[i] = newMove;
    }
  }

  function moveBlockLeft() {
    for (var i = 19; i >= 0; i--) {
        var newMove = move[i].concat();
        for (var j = 1; j < 10; j++) {
            if (move[i][j] == 1) {
                array[i][j - 1] = array[i][j];
                array[i][j] = 0;
                newMove[j - 1] = 1;
                newMove[j] = 0;
            }
        }
        move[i] = newMove;
    }
  }

  function genBlock(blockNum) {
    if (moveFlag == 0) {
        switch (blockNum) {
            case 1:
                array[0][5] = blockNum;
                array[1][5] = blockNum;
                array[2][5] = blockNum;
                array[3][5] = blockNum;
                move[0][5] = 1;
                move[1][5] = 1;
                move[2][5] = 1;
                move[3][5] = 1;
                break;
            case 2:
                array[0][4] = blockNum;
                array[0][5] = blockNum;
                array[1][4] = blockNum;
                array[1][5] = blockNum;
                move[0][4] = 1;
                move[0][5] = 1;
                move[1][4] = 1;
                move[1][5] = 1;
                break;
            case 3:
                array[0][4] = blockNum;
                array[1][4] = blockNum;
                array[1][5] = blockNum;
                array[2][5] = blockNum;
                move[0][4] = 1;
                move[1][4] = 1;
                move[2][5] = 1;
                move[3][5] = 1;
                break;
            case 4:
                array[0][3] = blockNum;
                array[1][4] = blockNum;
                array[1][5] = blockNum;
                array[0][6] = blockNum;
                move[0][3] = 1;
                move[1][4] = 1;
                move[1][5] = 1;
                move[0][6] = 1;
                break;
            case 5:
                array[0][2] = blockNum;
                array[1][3] = blockNum;
                array[2][4] = blockNum;
                array[3][3] = blockNum;
                array[4][2] = blockNum;
                move[0][2] = 1;
                move[1][3] = 1;
                move[2][4] = 1;
                move[3][3] = 1;
                move[4][2] = 1;
                break;
            case 6:
                array[0][2] = blockNum;
                array[1][3] = blockNum;
                array[2][4] = blockNum;
                array[3][3] = blockNum;
                array[4][2] = blockNum;
                move[0][2] = 1;
                move[1][3] = 1;
                move[2][4] = 1;
                move[3][3] = 1;
                move[4][2] = 1;
                break;
        }
        moveFlag = 1;
    }
  }
  function checkDelete() {
    for (var i = 19; i >= 0; i--) {
        if (!array[i].includes(0)) {
            for (var j = 0; j < 10; j++) {
                array[i][j] = 0;
            }
        }
    }
  }
  document.onkeydown = function(e) { // キーボードの処理はこのように書きます
    if (mode === false){return};
      switch (e.code) {
          case "Space":
              var random = Math.floor( Math.random() * 6 )+1;
              genBlock(random); 
              break;
          case "ArrowRight":
            moveBlockRight();
            break;
          case "ArrowLeft":
              moveBlockLeft();
              break;
          case "ArrowDown":
              fall();
              break;
      }
      draw();
  }

  draw(); // 読込が完了したらまず表示

  setInterval(function() {
      if (moveFlag == 0){
        checkDelete(); // ここを追加
      }else{
        fall();
      }
      draw();
  }, 500); // 0.5秒ごとに表示を更新していきます
});