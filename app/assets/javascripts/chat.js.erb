$(function() {
  $('.chat_btn').on('click', function() {
    $(".chat_main").removeClass("close_chat");
    $(".chat_main").addClass("open_chat");
  });

  $('.chat_main__top img').on('click', function() {
    $(".chat_main").removeClass("open_chat");
    $(".chat_main").addClass("close_chat");
  });
  function insert_html_self(text) {
       html = `<div class="chat_self">
                <div class="chat_self__message">
                ${text}
                </div>
                </div>`;
        body = $('.chat_main__body');
        body.append(html);
        $('.chat_input').val("");
        body.animate({scrollTop:body[0].scrollHeight}, 300, 'swing');
  }

  function insert_html_auto(text) {
        html = `<div class="chat_auto">
                  <img src="<%= image_path('IMG_9901.GIF') %>">
                  <div class="chat_auto__message">
                    ${text}
                  </div>
                </div>`;
        body = $('.chat_main__body');
        body.append(html);
        body.animate({scrollTop:body[0].scrollHeight}, 300, 'swing');
  }
  $('.chat_input__submit').on('click', function() {
    text = $('.chat_input').val();
    if(text !== ""){
      if(text === "テトリス"){
          insert_html_self(text);
          insert_html_auto("テトリスモードに遷移します。");
          setTimeout(function() {
            mode_change();
        }, 3000);
      }else{
        insert_html_self(text);
        $.ajax({
          url: "/guides/bot",
          type: "GET",
          data: {keyword: text},
          dataType: "json",
        })
        .done(function(data) {
          insert_html_auto(data.res_data.result);
        })
        .fail(function(data) {
          insert_html_auto("わしもう疲れたわ、、、");
        });

      } 
    }
  });
  mode = false;
  function mode_change() {
    $(".chat_main").removeClass("open_chat");
    $(".chat_main").addClass("close_chat");
    $(".teto_main").removeClass("close_teto");
    $(".teto_main").addClass("open_teto");
    mode = true;
  };

  $('.teto_main__top img').on('click', function() {
    $(".teto_main").removeClass("open_teto");
    $(".teto_main").addClass("close_teto");
    mode = false;
  });
  //モードチェンジ
  var array = [
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  ];
  var move = [
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  ];
  var moveFlag = 0; // 動かす対象があるかどうか(0はない、1はあることを示す)

  function draw() {
      $('#game').find('tr').each(function(i, elemTr) { // trタグそれぞれに対する処理
          $(elemTr).children().each(function(j, elemTd) { // tdタグそれぞれに対する処理
              $(elemTd).removeClass(); // まずはクラスをすべてなしにする
              switch (array[i][j]) {
                  case 1:
                      $(elemTd).addClass("stick"); // 1の時にはstickクラスを割り振る
                      $(elemTd).addClass("back"); // 1の時にはstickクラスを割り振る
                      break;
                  case 2:
                      $(elemTd).addClass("cube"); // 1の時にはstickクラスを割り振る
                      $(elemTd).addClass("back"); // 1の時にはstickクラスを割り振る
                    break;
                  case 3:
                      $(elemTd).addClass("gnu"); // 1の時にはstickクラスを割り振る
                      $(elemTd).addClass("back"); // 1の時にはstickクラスを割り振る
                      break;
                  case 4:
                      $(elemTd).addClass("god"); // 1の時にはstickクラスを割り振る
                      $(elemTd).addClass("back"); // 1の時にはstickクラスを割り振る
                      break;
                  case 5:
                      $(elemTd).addClass("ku"); // 1の時にはstickクラスを割り振る
                      $(elemTd).addClass("back"); // 1の時にはstickクラスを割り振る
                      break;
                  case 6:
                      $(elemTd).addClass("oya"); // 1の時にはstickクラスを割り振る
                      $(elemTd).addClass("back"); // 1の時にはstickクラスを割り振る
                      break;
                  default:
                      $(elemTd).addClass("default"); // それ以外の時にはdefaultクラスを割り振る
              }
          })
      });
  }

  function fall() {
    var under = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
    tmp_array = array.slice(0, array.length);
    for (var i = 19; i >= 0; i--) {
        for (var j = 0; j < 10; j++) {
            if (under[j] == 0) {
                if (array[i][j] == 0) {
                    // 下に何もなくブロックでもない
                    under[j] = 0;
                } else {
                    // moveも一緒に動かす
                    if (move[i][j] == 1) {
                        move[i][j] = 0;
                        move[i + 1][j] = 1;
                        // 下に何もなくブロックであるとき
                        array[i + 1][j] = array[i][j];
                        array[i][j] = 0;
                    }
                    under[j] = 0;
                }
            } else {
                if (array[i][j] == 0) {
                    // 下がブロックでブロックでないとき
                    under[j] = 0;
                } else {
                 // 下がブロックでブロックのとき
                 if (move[i][j] == 1) {
                  resetMove();
                  array = tmp_array.slice(0, tmp_array.length);
                  return;
                 }
                  under[j] = 1;
              }
            }
        }
    }
  }
  
  function resetMove() {
    moveFlag = 0;
    for (var i = 0; i < 20; i++) {
        for (var j = 0; j < 10; j++) {
            move[i][j] = 0;
        }
    }
  }

  function moveBlockRight() {
    for (var i = 19; i >= 0; i--) {
        var newMove = move[i].concat();
        for (var j = 8; j >= 0; j--) {
            if (move[i][j] == 1) {
                array[i][j + 1] = array[i][j];
                array[i][j] = 0;
                newMove[j + 1] = 1;
                newMove[j] = 0;
            }
        }
        move[i] = newMove;
    }
  }

  function moveBlockLeft() {
    for (var i = 19; i >= 0; i--) {
        var newMove = move[i].concat();
        for (var j = 1; j < 10; j++) {
            if (move[i][j] == 1) {
                array[i][j - 1] = array[i][j];
                array[i][j] = 0;
                newMove[j - 1] = 1;
                newMove[j] = 0;
            }
        }
        move[i] = newMove;
    }
  }

  function genBlock(blockNum) {
    if (moveFlag == 0) {
        switch (blockNum) {
            case 1:
                array[0][5] = blockNum;
                array[1][5] = blockNum;
                array[2][5] = blockNum;
                array[3][5] = blockNum;
                move[0][5] = 1;
                move[1][5] = 1;
                move[2][5] = 1;
                move[3][5] = 1;
                break;
            case 2:
                array[0][4] = blockNum;
                array[0][5] = blockNum;
                array[1][4] = blockNum;
                array[1][5] = blockNum;
                move[0][4] = 1;
                move[0][5] = 1;
                move[1][4] = 1;
                move[1][5] = 1;
                break;
            case 3:
                array[0][4] = blockNum;
                array[1][4] = blockNum;
                array[1][5] = blockNum;
                array[2][5] = blockNum;
                move[0][4] = 1;
                move[1][4] = 1;
                move[2][5] = 1;
                move[3][5] = 1;
                break;
            case 4:
                array[0][3] = blockNum;
                array[1][4] = blockNum;
                array[1][5] = blockNum;
                array[0][6] = blockNum;
                move[0][3] = 1;
                move[1][4] = 1;
                move[1][5] = 1;
                move[0][6] = 1;
                break;
            case 5:
                array[0][2] = blockNum;
                array[1][3] = blockNum;
                array[2][4] = blockNum;
                array[3][3] = blockNum;
                array[4][2] = blockNum;
                move[0][2] = 1;
                move[1][3] = 1;
                move[2][4] = 1;
                move[3][3] = 1;
                move[4][2] = 1;
                break;
            case 6:
                array[0][2] = blockNum;
                array[1][3] = blockNum;
                array[2][4] = blockNum;
                array[3][3] = blockNum;
                array[4][2] = blockNum;
                move[0][2] = 1;
                move[1][3] = 1;
                move[2][4] = 1;
                move[3][3] = 1;
                move[4][2] = 1;
                break;
        }
        moveFlag = 1;
    }
  }
  function checkDelete() {
    for (var i = 19; i >= 0; i--) {
        if (!array[i].includes(0)) {
            for (var j = 0; j < 10; j++) {
                array[i][j] = 0;
            }
        }
    }
  }
  document.onkeydown = function(e) { // キーボードの処理はこのように書きます
    if (mode === false){return};
      switch (e.code) {
          case "Space":
              var random = Math.floor( Math.random() * 6 )+1;
              genBlock(random); 
              break;
          case "ArrowRight":
            moveBlockRight();
            break;
          case "ArrowLeft":
              moveBlockLeft();
              break;
          case "ArrowDown":
              fall();
              break;
      }
      draw();
  }

  draw(); // 読込が完了したらまず表示

  setInterval(function() {
      if (moveFlag == 0){
        checkDelete(); // ここを追加
      }else{
        fall();
      }
      draw();
  }, 500); // 0.5秒ごとに表示を更新していきます
});